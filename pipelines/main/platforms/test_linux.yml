steps:
  - group: ":linux: Linux"
    steps:
      - label: ":linux: :test_tube: test ${TRIPLET?}${USE_RR-}"
        key: "test_${TRIPLET?}${USE_RR-}"
        depends_on:
          - "build_${TRIPLET?}"
        plugins:
          - JuliaCI/external-buildkite#v1:
              version: "./.buildkite-external-version"
              repo_url: "https://github.com/JuliaCI/julia-buildkite"
          - JuliaCI/julia#v1:
              # Drop default "registries" directory, so it is not persisted from execution to execution
              persist_depot_dirs: packages,artifacts,compiled
              version: '1.6'
          - staticfloat/sandbox#v1:
              rootfs_url: https://github.com/JuliaCI/rootfs-images/releases/download/${ROOTFS_TAG?}/package_${OS?}.${ARCH_ROOTFS?}.tar.gz
              # rootfs_url: https://github.com/JuliaCI/rootfs-images/releases/download/${ROOTFS_TAG?}/tester${OS?}.${ARCH_ROOTFS?}.tar.gz
              rootfs_treehash: "${ROOTFS_HASH?}"
              uid: 1000
              gid: 1000
              workspaces:
                # Include `/cache/repos` so that our `git` version introspection works.
                - "/cache/repos:/cache/repos"
        env:
          JULIA_SHELL: "/bin/bash"
        timeout_in_minutes: ${TIMEOUT?}
        soft_fail: ${ALLOW_FAIL?}
        commands: |
          # First, get things like `LONG_COMMIT` and `SHORT_COMMIT`, etc...
          TRIPLET="${TRIPLET?}" source .buildkite/utilities/calc_version_envs.sh

          echo "--- Download build artifacts"
          buildkite-agent artifact download "$${UPLOAD_FILENAME}" .

          echo "--- Extract build artifacts"
          tar xzf "$${UPLOAD_FILENAME}" "$${JULIA_INSTALL_DIR}/"

          echo "--- Print Julia version info"
          $${JULIA_BINARY} -e 'using InteractiveUtils; InteractiveUtils.versioninfo()'
          echo "JULIA_CPU_THREADS is: $${JULIA_CPU_THREADS}"
          $${JULIA_BINARY} -e '@info "" Sys.CPU_THREADS'

          echo "--- Set some environment variables"
          export OPENBLAS_NUM_THREADS=8
          unset JULIA_DEPOT_PATH
          unset JULIA_PKG_SERVER

          # Make sure that temp files and temp directories are created in a location that is
          # backed by real storage.
          export TMPDIR="$(pwd)/tmp"
          mkdir -p $${TMPDIR}

          # By default, run all tests.
          export TESTS="all LibGit2/online --ci"

          # If we're running inside of `rr`, limit the number of threads
          if [[ "${USE_RR?}" == "rr" ]]; then
            export JULIA_CMD_FOR_TESTS="$${JULIA_BINARY} .buildkite/utilities/rr/rr_capture.jl $${JULIA_BINARY}"
            export NCORES_FOR_TESTS="parse(Int, ENV[\"JULIA_RRCAPTURE_NUM_CORES\"])"
            export JULIA_NUM_THREADS=1

            # Give `rr` 60 minutes to run the tests
            export JULIA_TEST_RR_TIMEOUT="60"
          else
            export JULIA_CMD_FOR_TESTS="$${JULIA_BINARY}"
            export NCORES_FOR_TESTS="Sys.CPU_THREADS"
            export JULIA_NUM_THREADS=16
          fi

          echo "--- Print the list of test sets, and other useful environment variables"
          echo "JULIA_CMD_FOR_TESTS is:    $${JULIA_CMD_FOR_TESTS:?}"
          echo "JULIA_NUM_THREADS is:      $${JULIA_NUM_THREADS}" # Note: this environment variable might not be set
          echo "NCORES_FOR_TESTS is:       $${NCORES_FOR_TESTS:?}"
          echo "OPENBLAS_NUM_THREADS is:   $${OPENBLAS_NUM_THREADS:?}"
          echo "TESTS is:                  $${TESTS:?}"
          echo "USE_RR is:                 ${USE_RR?}"

          echo "--- Run the Julia test suite"
          $${JULIA_CMD_FOR_TESTS:?} -e "Base.runtests(\"$${TESTS:?}\"; ncores = $${NCORES_FOR_TESTS:?})"
        agents:
          queue: "julia"
          sandbox_capable: "true"
          os: "linux"
