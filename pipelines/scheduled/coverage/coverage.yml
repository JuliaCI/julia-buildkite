steps:
  - group: "Coverage"
    steps:
      - label: ":linux: coverage (x86_64)"
        key:   "coverage-linux"
        if: (pipeline.slug == "julia-buildkite-scheduled") || (pipeline.slug == "julia-master-scheduled")
        plugins:
          - JuliaCI/external-buildkite#v1:
              version: "./.buildkite-external-version"
              repo_url: "https://github.com/JuliaCI/julia-buildkite"
          - JuliaCI/julia#v1:
              # Drop default "registries" directory, so it is not persisted from execution to execution
              persist_depot_dirs: packages,artifacts,compiled
              version: '1'
          - staticfloat/sandbox#v2:
              rootfs_url: https://github.com/JuliaCI/rootfs-images/releases/download/v6.00/package_linux.x86_64.tar.gz
              rootfs_treehash: "4dcde853eb5baaa0a8f087b633eaf955dc94b5dc"
              uid: 1000
              gid: 1000
          - JuliaCI/cryptic#v2:
              variables:
                - CODECOV_TOKEN="U2FsdGVkX19l0fhdBabbuiEdysyEabkJLRHfxm7CNRkuGbnwPV365sxxC7Czs/CVcws0N1oB4pVwALRRMe36oA=="
                - COVERALLS_TOKEN="U2FsdGVkX19zopI0hMNzzi2UUOvNVFD8Y0iisFnO/ryVxU7Tit8ZEaeN+gxodRx4CosUUh192F1+q3dTMWRIvw=="
        timeout_in_minutes: 720
        commands: |
          echo "--- Build Julia from source"
          make --output-sync -j$${JULIA_NUM_THREADS}

          echo "--- Print Julia version info"
          ./julia -e 'using InteractiveUtils; InteractiveUtils.versioninfo()'
          ./julia -e '@info "" Sys.CPU_THREADS'
          # this is necessary to make sure that the LibGit2 tests passes
          git config --global init.defaultBranch master

          echo "--- Run Julia tests in parallel with code coverage enabled"
          export JULIA_NUM_THREADS=1
          export JULIA_WORKER_TIMEOUT=1200 # 1200 seconds = 20 minutes
          ./julia -e 'import Distributed; @info "" Distributed.worker_timeout()'
          ./julia .buildkite/pipelines/scheduled/coverage/run_tests_parallel.jl

          echo "--- Move the lcov files into the `./lcov_files` directory"
          ls *.info
          mkdir -p lcov_files
          mv *.info lcov_files
          ls lcov_files

          echo "--- Upload lcov files"
          tar -zcf lcov_files.tar.gz lcov_files/
          buildkite-agent artifact upload lcov_files.tar.gz

          echo "--- Process and upload coverage information"
          ./julia .buildkite/pipelines/scheduled/coverage/upload_coverage.jl
        agents:
          queue: "julia"
          # Only run on `sandbox.jl` machines (not `docker`-isolated ones) since we need nestable sandboxing
          sandbox_capable: "true"
          os: "linux"
          arch: "x86_64"
        env:
          # Receive cryptic token from parent job
          BUILDKITE_PLUGIN_CRYPTIC_BASE64_SIGNED_JOB_ID_SECRET: ${BUILDKITE_PLUGIN_CRYPTIC_BASE64_SIGNED_JOB_ID_SECRET?}

      - label: ":macos: coverage (aarch64)"
        key:   "coverage-macos-aarch64"
        if: (pipeline.slug == "julia-buildkite-scheduled") || (pipeline.slug == "julia-master-scheduled")
        plugins:
          - JuliaCI/external-buildkite#v1:
              version: "./.buildkite-external-version"
              repo_url: "https://github.com/JuliaCI/julia-buildkite"
          - JuliaCI/julia#v1:
              # Drop default "registries" directory, so it is not persisted from execution to execution
              persist_depot_dirs: packages,artifacts,compiled
              version: '1'
          - JuliaCI/cryptic#v2:
              variables:
                - CODECOV_TOKEN="U2FsdGVkX19l0fhdBabbuiEdysyEabkJLRHfxm7CNRkuGbnwPV365sxxC7Czs/CVcws0N1oB4pVwALRRMe36oA=="
                - COVERALLS_TOKEN="U2FsdGVkX19zopI0hMNzzi2UUOvNVFD8Y0iisFnO/ryVxU7Tit8ZEaeN+gxodRx4CosUUh192F1+q3dTMWRIvw=="
        timeout_in_minutes: 720
        commands: |
          echo "--- Build Julia from source"
          make -j$${JULIA_NUM_THREADS}

          echo "--- Print Julia version info"
          ./julia -e 'using InteractiveUtils; InteractiveUtils.versioninfo()'
          ./julia -e '@info "" Sys.CPU_THREADS'
          # this is necessary to make sure that the LibGit2 tests passes
          git config --global init.defaultBranch master

          echo "--- Run Julia tests in parallel with code coverage enabled"
          export JULIA_NUM_THREADS=1
          export JULIA_WORKER_TIMEOUT=1200 # 1200 seconds = 20 minutes
          ./julia -e 'import Distributed; @info "" Distributed.worker_timeout()'
          ./julia .buildkite/pipelines/scheduled/coverage/run_tests_parallel.jl

          echo "--- Move the lcov files into the `./lcov_files` directory"
          ls *.info
          mkdir -p lcov_files
          mv *.info lcov_files
          ls lcov_files

          echo "--- Upload lcov files"
          tar -zcf lcov_files.tar.gz lcov_files/
          buildkite-agent artifact upload lcov_files.tar.gz

          echo "--- Process and upload coverage information"
          ./julia .buildkite/pipelines/scheduled/coverage/upload_coverage.jl
        agents:
          queue: "julia"
          os: "macos"
          arch: "aarch64"
        env:
          JULIA_SHELL: "/bin/bash"
          # Receive cryptic token from parent job
          BUILDKITE_PLUGIN_CRYPTIC_BASE64_SIGNED_JOB_ID_SECRET: ${BUILDKITE_PLUGIN_CRYPTIC_BASE64_SIGNED_JOB_ID_SECRET?}

      - label: ":windows: coverage (x86_64)"
        key:   "coverage-windows-x86_64"
        if: (pipeline.slug == "julia-buildkite-scheduled") || (pipeline.slug == "julia-master-scheduled")
        plugins:
          - JuliaCI/external-buildkite#v1:
              version: "./.buildkite-external-version"
              repo_url: "https://github.com/JuliaCI/julia-buildkite"
          - JuliaCI/julia#v1:
              # Drop default "registries" directory, so it is not persisted from execution to execution
              persist_depot_dirs: packages,artifacts,compiled
              version: '1'
          - JuliaCI/cryptic#v2:
              variables:
                - CODECOV_TOKEN="U2FsdGVkX19l0fhdBabbuiEdysyEabkJLRHfxm7CNRkuGbnwPV365sxxC7Czs/CVcws0N1oB4pVwALRRMe36oA=="
                - COVERALLS_TOKEN="U2FsdGVkX19zopI0hMNzzi2UUOvNVFD8Y0iisFnO/ryVxU7Tit8ZEaeN+gxodRx4CosUUh192F1+q3dTMWRIvw=="
          - docker#v3.13.0:
              image: "juliapackaging/package-windows-x86_64:v7.10"
              always-pull: true
              command: ["bash", "-c", "
                echo '--- Build Julia from source' &&
                make -j$${JULIA_NUM_THREADS} VERBOSE=1 &&
                echo '--- Print Julia version info' &&
                ./usr/bin/julia.exe -e 'using InteractiveUtils; InteractiveUtils.versioninfo()' &&
                ./usr/bin/julia.exe -e '@info \"\" Sys.CPU_THREADS' &&
                git config --global init.defaultBranch master &&
                echo '--- Run Julia tests in parallel with code coverage enabled' &&
                export JULIA_NUM_THREADS=1 &&
                export JULIA_WORKER_TIMEOUT=1200 &&
                ./usr/bin/julia.exe -e 'import Distributed; @info \"\" Distributed.worker_timeout()' &&
                ./usr/bin/julia.exe .buildkite/pipelines/scheduled/coverage/run_tests_parallel.jl &&
                echo '--- Move the lcov files into the ./lcov_files directory' &&
                ls *.info &&
                mkdir -p lcov_files &&
                mv *.info lcov_files &&
                ls lcov_files &&
                echo '--- Upload lcov files' &&
                tar -zcf lcov_files.tar.gz lcov_files/ &&
                buildkite-agent artifact upload lcov_files.tar.gz &&
                echo '--- Process and upload coverage information' &&
                ./usr/bin/julia.exe .buildkite/pipelines/scheduled/coverage/upload_coverage.jl
                "]
              propagate-environment: true
              volumes:
                # Mount buildkite-agent as well
                - "C:\\buildkite-agent\\bin:C:\\buildkite-agent\\bin"
              environment:
                - "JULIA_CPU_THREADS"
                - "BUILDKITE_AGENT_ACCESS_TOKEN"
                - "BUILDKITE_BRANCH"
                - "BUILDKITE_REPO"
                - "BUILDKITE_MESSAGE"
                - "BUILDKITE_BUILD_AUTHOR"
                - "BUILDKITE_BUILD_CREATOR"
                - "BUILDKITE_BUILD_AUTHOR_EMAIL"
                - "BUILDKITE_BUILD_CREATOR_EMAIL"
                - "CODECOV_TOKEN"
                - "COVERALLS_TOKEN"
        timeout_in_minutes: 720
        agents:
          queue: "julia"
          os: "windows"
          arch: "x86_64"
        env:
          JULIA_SHELL: "/bin/bash"
          # Receive cryptic token from parent job
          BUILDKITE_PLUGIN_CRYPTIC_BASE64_SIGNED_JOB_ID_SECRET: ${BUILDKITE_PLUGIN_CRYPTIC_BASE64_SIGNED_JOB_ID_SECRET?}

      - label: "Finalize parallel coverage"
        key: "coverage-finalize"
        if: (pipeline.slug == "julia-buildkite-scheduled") || (pipeline.slug == "julia-master-scheduled")
        depends_on:
          - "coverage-linux"
          - "coverage-macos-aarch64"
          - "coverage-windows-x86_64"
        plugins:
          - JuliaCI/external-buildkite#v1:
              version: "./.buildkite-external-version"
              repo_url: "https://github.com/JuliaCI/julia-buildkite"
          - JuliaCI/julia#v1:
              # Drop default "registries" directory, so it is not persisted from execution to execution
              persist_depot_dirs: packages,artifacts,compiled
              version: '1'
          - JuliaCI/cryptic#v2:
              variables:
                - COVERALLS_TOKEN="U2FsdGVkX19zopI0hMNzzi2UUOvNVFD8Y0iisFnO/ryVxU7Tit8ZEaeN+gxodRx4CosUUh192F1+q3dTMWRIvw=="
        timeout_in_minutes: 10
        commands: |
          echo "--- Signal completion of parallel coverage uploads"
          ./julia .buildkite/pipelines/scheduled/coverage/finish_parallel_coverage.jl
        agents:
          queue: "julia"
          os: "linux"
          arch: "x86_64"
        env:
          # Receive cryptic token from parent job
          BUILDKITE_PLUGIN_CRYPTIC_BASE64_SIGNED_JOB_ID_SECRET: ${BUILDKITE_PLUGIN_CRYPTIC_BASE64_SIGNED_JOB_ID_SECRET?}
