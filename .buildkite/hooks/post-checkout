#!/usr/bin/env bash

set -euo pipefail

# Buildkite users can trigger new builds with these values overridden to
# test specific julia gitshas
UPSTREAM_URL="${UPSTREAM_URL:-https://github.com/JuliaLang/julia.git}"
UPSTREAM_BRANCH="${UPSTREAM_BRANCH:-master}"

# All of our workers are required to provide a default for the julia cache dir
# We're going to cache repositories in here, just like buildkite itself would:
UPSTREAM_CACHE="${BUILDKITE_PLUGIN_JULIA_CACHE_DIR?}/repos/$(tr ':/.' '---' <<<"${UPSTREAM_URL}")"

DISABLE_UPSTREAM_CACHE="false"
if [[ "$(uname)" == "FreeBSD" ]]; then
    DISABLE_UPSTREAM_CACHE="true"
fi

if [[ "${DISABLE_UPSTREAM_CACHE}" != "true" ]]; then
    if [[ ! -d "${UPSTREAM_CACHE}" ]]; then
        echo "Clone ${UPSTREAM_URL}"
        mkdir -p "$(dirname "${UPSTREAM_CACHE}")"
        git clone --mirror "${UPSTREAM_URL}" "${UPSTREAM_CACHE}"
    else
        echo "Prune cache for ${UPSTREAM_URL}"
        rm -f "${UPSTREAM_CACHE}/gc.log"
        git -C "${UPSTREAM_CACHE}" prune
        echo "Update cache for ${UPSTREAM_URL}"
        git -C "${UPSTREAM_CACHE}" fetch
    fi
fi

# Clear out current directory
# The deliciously complicated `rm` invocation is thanks to https://unix.stackexchange.com/a/77313/29688
rm -rf ..?* .[!.]* *

# git clone, then force checkout the given gitref
UPSTREAM_GITREF="$(buildkite-agent meta-data get --default "origin/${UPSTREAM_BRANCH}" BUILDKITE_JULIA_VERSION)"

if [[ "${DISABLE_UPSTREAM_CACHE}" != "true" ]]; then
    # For some unknown reason, the `--dissociate` flag (which causes a `git repack -a -d`
    # to be run after the clone is set) causes a spurious error on macOS:
    #     fatal: unable to parse commit 1a2b3c3d
    #     warning: Clone succeeded, but checkout failed.
    #     You can inspect what was checked out with 'git status'
    #     and retry with 'git restore --source=HEAD :/'
    # This occurs when cloning manually as well, however the `git reset --hard`
    # below tends to work.  So we just ignore the error with `|| true` here,
    # and leave it to `git reset` to fail if there is actually a problem.
    git clone --dissociate --reference "${UPSTREAM_CACHE}" "${UPSTREAM_URL}" "./" || true
else
    git clone "${UPSTREAM_URL}" "./"
fi
git reset --hard "${UPSTREAM_GITREF}"
echo
git --no-pager log -1
echo

# Force external-buildkite plugin to use the current branch's commit as the version to download for this and all child jobs
if ! buildkite-agent meta-data exists BUILDKITE_PLUGIN_EXTERNAL_BUILDKITE_VERSION; then
    echo "Override external-buildkite metadata to VERSION '${BUILDKITE_COMMIT}' and REPO_URL 'https://github.com/JuliaCI/julia-buildkite'"
    buildkite-agent meta-data set BUILDKITE_PLUGIN_EXTERNAL_BUILDKITE_VERSION "${BUILDKITE_COMMIT:?}"
    buildkite-agent meta-data set BUILDKITE_PLUGIN_EXTERNAL_BUILDKITE_REPO_URL "https://github.com/JuliaCI/julia-buildkite"
fi

# Save the julia version we downloaded so that future jobs get the same version
if ! buildkite-agent meta-data exists BUILDKITE_JULIA_VERSION; then
    buildkite-agent meta-data set BUILDKITE_JULIA_VERSION "$(git rev-parse HEAD)"
    buildkite-agent meta-data set BUILDKITE_JULIA_BRANCH "${UPSTREAM_BRANCH}"
fi

# Export S3_BUCKET and S3_BUCKET_PREFIX, to force our CI to upload to a different S3 target than the actual CI pipeline would.
export S3_BUCKET="julialang-ephemeral"
export S3_BUCKET_PREFIX="julia-buildkite-uploads/bin"
